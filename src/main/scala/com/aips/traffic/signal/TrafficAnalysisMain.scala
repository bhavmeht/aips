package com.aips.traffic.signal

import com.aips.traffic.signal.TrafficStats._
import com.typesafe.scalalogging.LazyLogging

import java.io.File

object TrafficAnalysisMain extends LazyLogging {

  val message =
    """Invalid inputs: Please use following format
    Usage: CarsInTrafficAnalysis ["TrafficSampleFilePath"]
    Example: CarsInTrafficAnalysis "src/main/resources/traffic-stats.txt""""

  def main(args: Array[String]): Unit = {
    // It should only allow file path of Traffic samples.
    if (args.length != 1) println(message)
    else {
      val trafficSamplesFilePath = args(0)
      require(new File(trafficSamplesFilePath).isFile, s"Invalid input file path: $trafficSamplesFilePath")
      val samples = getTrafficSamples(trafficSamplesFilePath)

      logger.info("Initiating analysis on stats generated by automated traffic counter at signal.")

      println(s"\nThe number of cars seen in total: ${trafficStatsImpl.getTotalCars(samples)}")

      println("\nThe number of cars seen on each date:")
      println("\tDate\t\tNumber of cars")
      trafficStatsImpl.getNumberOfCarsByDay(samples).foreach { case (date, cars) => println(s"\t$date\t\t$cars") }

      println("\nThe top 3 half hours with most number of cars:")
      println("\tSampleHalfHours\t\tNumber of cars")
      trafficStatsImpl.getTop3MostCarsSeen(samples).foreach(sample =>
        println(s"\t${sample.sampleTime}\t\t${sample.numberOfCars}")
      )

      val (consecutiveSamples, cars) = trafficStatsImpl.getLeastCarsInOneAndHalfHour(samples)
      println(s"\nThe 1.5 hour period with least $cars number of cars:")
      consecutiveSamples.foreach(sample => println(s"\t$sample"))
    }
  }

}
